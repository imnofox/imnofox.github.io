<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>imnofox</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://imnofox.com/"/>
  <updated>2016-04-09T10:08:58.896Z</updated>
  <id>http://imnofox.com/</id>
  
  <author>
    <name>imnofox</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ModPE &amp; Node</title>
    <link href="http://imnofox.com/p/ModPE-Node/"/>
    <id>http://imnofox.com/p/ModPE-Node/</id>
    <published>2016-04-09T09:05:26.000Z</published>
    <updated>2016-04-09T10:08:58.896Z</updated>
    
    <content type="html">&lt;p&gt;Modding Minecraft Pocket Edition has been easily achieved by writing simple JavaScript files for ages, but obviously this isn’t ideal for developing the complex mods popular now.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Enter Node&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By using a combination of NodeJS and various build tools, we can easily build complex ModPE mods.
This allows us to import third-party modules and structure multiple files in a maintainable way.&lt;/p&gt;
&lt;p&gt;Possibly the greatest benefit of this is the ability to &lt;code&gt;require&lt;/code&gt; modules. Developers can now use libraries in the ModPE packages, such as the &lt;a href=&quot;https://github.com/sliceofcode/inform&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;inform library&lt;/a&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; inform = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;inform&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; globe = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;modpe-globe&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;globe.newLevel = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; scripts = inform.all();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (script &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; scripts) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scripts[script].call(&lt;span class=&quot;string&quot;&gt;&#39;customHook&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Obviously, these are just Node modules, however the majority of NPM packages wouldn’t behave as expected in the ModPE environment.&lt;/p&gt;
&lt;h1&gt;But how?&lt;/h1&gt;
&lt;p&gt;The important thing to remember is to use &lt;a href=&quot;https://npmjs.com/package/browserify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Browserify&lt;/a&gt;, and if using ES6, &lt;a href=&quot;https://github.com/babel/babelify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babelify&lt;/a&gt; is also essential.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This whole setup, with Grunt, is &lt;a href=&quot;https://github.com/imnofox/ModPEtemplate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;available as a skeleton here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One downside of Browserify in this usage is that inability for the ModPE engine to call hooks, such as &lt;code&gt;newLevel&lt;/code&gt;, &lt;code&gt;useItem&lt;/code&gt;, etc.
This is easily overcome by utilising the ‘modpe-globe’ module, as shown in the demo code above. This simply provides an entrance to the world outside of the Browserify realm.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Moving from unweildy &amp;amp; lengthy ModPE scripts to cleaner &amp;amp; organised Node projects is now the smart way to go, especially, when paired with any &lt;a href=&quot;https://github.com/imnofox/ModPEtemplate/blob/master/Gruntfile.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;build&lt;/a&gt; &lt;a href=&quot;https://github.com/sliceofcode/flytest/blob/master/flyfile.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tool&lt;/a&gt;. Whether it’s feasible for the average ModPE developer is the next question.&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Modding Minecraft Pocket Edition has been easily achieved by writing simple JavaScript files for ages, but obviously this isn’t ideal for
    
    </summary>
    
    
  </entry>
  
</feed>
